# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import multi_service_pb2 as multi__service__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in multi_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SummarizerStub(object):
    """Summarizer service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SummarizeText = channel.unary_unary(
                '/Summarizer/SummarizeText',
                request_serializer=multi__service__pb2.StringRequest.SerializeToString,
                response_deserializer=multi__service__pb2.StringResponse.FromString,
                _registered_method=True)


class SummarizerServicer(object):
    """Summarizer service
    """

    def SummarizeText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SummarizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SummarizeText': grpc.unary_unary_rpc_method_handler(
                    servicer.SummarizeText,
                    request_deserializer=multi__service__pb2.StringRequest.FromString,
                    response_serializer=multi__service__pb2.StringResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Summarizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Summarizer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Summarizer(object):
    """Summarizer service
    """

    @staticmethod
    def SummarizeText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Summarizer/SummarizeText',
            multi__service__pb2.StringRequest.SerializeToString,
            multi__service__pb2.StringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AudioStub(object):
    """Audio generation service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TextToAudioGeneration = channel.unary_unary(
                '/Audio/TextToAudioGeneration',
                request_serializer=multi__service__pb2.StringRequest.SerializeToString,
                response_deserializer=multi__service__pb2.MessageResponse.FromString,
                _registered_method=True)


class AudioServicer(object):
    """Audio generation service
    """

    def TextToAudioGeneration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TextToAudioGeneration': grpc.unary_unary_rpc_method_handler(
                    servicer.TextToAudioGeneration,
                    request_deserializer=multi__service__pb2.StringRequest.FromString,
                    response_serializer=multi__service__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Audio', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Audio', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Audio(object):
    """Audio generation service
    """

    @staticmethod
    def TextToAudioGeneration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Audio/TextToAudioGeneration',
            multi__service__pb2.StringRequest.SerializeToString,
            multi__service__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImageStub(object):
    """Image generation service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TextToImageGeneration = channel.unary_unary(
                '/Image/TextToImageGeneration',
                request_serializer=multi__service__pb2.StringRequest.SerializeToString,
                response_deserializer=multi__service__pb2.MessageResponse.FromString,
                _registered_method=True)


class ImageServicer(object):
    """Image generation service
    """

    def TextToImageGeneration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TextToImageGeneration': grpc.unary_unary_rpc_method_handler(
                    servicer.TextToImageGeneration,
                    request_deserializer=multi__service__pb2.StringRequest.FromString,
                    response_serializer=multi__service__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Image', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Image', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Image(object):
    """Image generation service
    """

    @staticmethod
    def TextToImageGeneration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Image/TextToImageGeneration',
            multi__service__pb2.StringRequest.SerializeToString,
            multi__service__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SpeakerStub(object):
    """Speaker recognition service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SpeakerRecognition = channel.unary_unary(
                '/Speaker/SpeakerRecognition',
                request_serializer=multi__service__pb2.StringRequest.SerializeToString,
                response_deserializer=multi__service__pb2.MessageResponse.FromString,
                _registered_method=True)


class SpeakerServicer(object):
    """Speaker recognition service
    """

    def SpeakerRecognition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpeakerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SpeakerRecognition': grpc.unary_unary_rpc_method_handler(
                    servicer.SpeakerRecognition,
                    request_deserializer=multi__service__pb2.StringRequest.FromString,
                    response_serializer=multi__service__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Speaker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Speaker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Speaker(object):
    """Speaker recognition service
    """

    @staticmethod
    def SpeakerRecognition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Speaker/SpeakerRecognition',
            multi__service__pb2.StringRequest.SerializeToString,
            multi__service__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
